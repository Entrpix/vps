<?xml version="1.0" encoding="utf-8" standalone="yes"?><?xml-stylesheet href="/feed_style.xsl" type="text/xsl"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:media="https://www.rssboard.org/media-rss">
  <channel>
    <title>Posts on Scaratek&#39;s Website</title>
    <link>https://entrpix.me/posts/</link>
    <description>Recent content in Posts on Scaratek&#39;s Website</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <copyright>Entrpix - GPLv3</copyright>
    <lastBuildDate>Fri, 10 May 2024 10:29:30 +0000</lastBuildDate><atom:link href="https://entrpix.me/posts/index.xml" rel="self" type="application/rss+xml" /><icon>https://entrpix.me/logo.png</icon>
    
    
    <item>
      <title>Hello, World!</title>
      <link>https://entrpix.me/posts/example/</link>
      <pubDate>Fri, 10 May 2024 10:29:30 +0000</pubDate>
      
      <guid>https://entrpix.me/posts/example/</guid>
      <description><![CDATA[<h1 id="example">Example</h1>
<p>Example Blog Post</p>
<h1 id="h1">H1</h1>
<h2 id="h2">H2</h2>
<h3 id="h3">H3</h3>
<h4 id="h4">H4</h4>
<p><em>Italic</em>
<strong>Bold</strong></p>
<p><a href="https://entrpix.me">Link</a></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">&#39;Syntax Highlighting&#39;</span>);
</span></span></code></pre></div>]]></description>
      
    </item>
    
    
    
    <item>
      <title>How I made a basic Webproxy</title>
      <link>https://entrpix.me/posts/how_i_made_a_webproxy/</link>
      <pubDate>Fri, 10 May 2024 10:29:30 +0000</pubDate>
      
      <guid>https://entrpix.me/posts/how_i_made_a_webproxy/</guid>
      <description><![CDATA[<h1 id="how-i-made-a-basic-webproxy">How I made a basic Webproxy</h1>
<p>I wanted to document how I made a very simple Webproxy for anyone whos interested in this kind of stuff</p>
<p>First of all this not something like <a href="https://github.com/titaniumnetwork-dev/ultraviolet">Ultraviolet</a>.<br>
<a href="https://github.com/titaniumnetwork-dev/ultraviolet">Ultraviolet</a> uses <a href="https://github.com/tomphttp">TompHTTP</a>, uses <a href="https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API">Service Workers</a>, and does JavaScript rewriting.</p>
<p>Frankly, all of that stuff is too complicated for me.</p>
<p>So instead I wanted to create a basic Webproxy that only does HTML and CSS rewriting.<br>
This means only static sites will work.</p>
<h2 id="how-i-made-it">How I made it</h2>
<p>There are two parts, the server and the client.</p>
<h3 id="server">Server</h3>
<p>The server is simple.<br>
It uses <a href="https://expressjs.com">ExpressJS</a> and <a href="https://www.npmjs.com/package/node-fetch">node-fetch</a>.</p>
<p><a href="https://expressjs.com">ExpressJS</a> is used for:</p>
<ul>
<li>Serving the client</li>
<li>Creating the API for <a href="https://www.npmjs.com/package/node-fetch">node-fetch</a></li>
<li>And controlling headers.</li>
</ul>
<p><a href="https://www.npmjs.com/package/node-fetch">node-fetch</a> is used for proxying the request to the website</p>
<p>This is the server code:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">fetch</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;node-fetch&#39;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">import</span> <span style="color:#a6e22e">express</span> <span style="color:#a6e22e">from</span> <span style="color:#e6db74">&#39;express&#39;</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">publicPath</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;public&#34;</span>;
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">port</span> <span style="color:#f92672">=</span> <span style="color:#ae81ff">3000</span>;
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">blockList</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#34;https://www.google.com&#34;</span>]; <span style="color:#75715e">// Sites in here will return 500
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">jsInjection</span> <span style="color:#f92672">=</span> <span style="color:#e6db74">`console.log(&#39;native&#39;);`</span>; <span style="color:#75715e">// Injects this into page
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">app</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">express</span>();
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">use</span>(<span style="color:#a6e22e">express</span>.<span style="color:#66d9ef">static</span>(<span style="color:#a6e22e">publicPath</span>));
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">handleResponse</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">async</span> (<span style="color:#a6e22e">response</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">contentType</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">headers</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;content-type&#39;</span>);
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">setHeader</span>(<span style="color:#e6db74">&#39;Content-Type&#39;</span>, <span style="color:#a6e22e">contentType</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">contentType</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#a6e22e">contentType</span>.<span style="color:#a6e22e">startsWith</span>(<span style="color:#e6db74">&#39;text&#39;</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">text</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">rewritten</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`&lt;script src=&#34;https://entrpix.me/native.js&#34;&gt;&lt;/script&gt;`</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`&lt;script&gt;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">jsInjection</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&lt;/script&gt;`</span>; <span style="color:#75715e">// Element Rewriting + JS Injection
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">rewritten</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">else</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">response</span>.<span style="color:#a6e22e">arrayBuffer</span>();
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">buffer</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">Buffer</span>.<span style="color:#a6e22e">from</span>(<span style="color:#a6e22e">data</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">send</span>(<span style="color:#a6e22e">buffer</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">get</span>(<span style="color:#e6db74">&#39;/url/*&#39;</span>, <span style="color:#66d9ef">async</span> (<span style="color:#a6e22e">req</span>, <span style="color:#a6e22e">res</span>) =&gt; {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">URL</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">req</span>.<span style="color:#a6e22e">params</span>[<span style="color:#ae81ff">0</span>];
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">blockList</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">URL</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;Blocked URL&#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#75715e">// Block URLs
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">try</span> {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">response</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">fetch</span>(<span style="color:#a6e22e">URL</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">await</span> <span style="color:#a6e22e">handleResponse</span>(<span style="color:#a6e22e">response</span>, <span style="color:#a6e22e">res</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    } <span style="color:#66d9ef">catch</span> (<span style="color:#a6e22e">error</span>) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">error</span>(<span style="color:#a6e22e">error</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;Error fetching URL&#39;</span>);
</span></span><span style="display:flex;"><span>    }
</span></span><span style="display:flex;"><span>});
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">app</span>.<span style="color:#a6e22e">listen</span>(<span style="color:#a6e22e">port</span>, () =&gt; { 
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">console</span>.<span style="color:#a6e22e">log</span>(<span style="color:#e6db74">`Server is running on port: </span><span style="color:#e6db74">${</span><span style="color:#a6e22e">port</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>); 
</span></span><span style="display:flex;"><span>});
</span></span></code></pre></div><p><code>contentType</code> is used for controlling how the content is being served.<br>
Things like HTML, CSS, etc. use <code>Content-Type text/*something*</code> and are returned as text.<br>
Meanwhile images use <code>Content-Type image/*something*</code> and return buffers.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">blockList</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#a6e22e">URL</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">res</span>.<span style="color:#a6e22e">status</span>(<span style="color:#ae81ff">500</span>).<span style="color:#a6e22e">send</span>(<span style="color:#e6db74">&#39;Blocked URL&#39;</span>);
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">return</span>;
</span></span><span style="display:flex;"><span>    } <span style="color:#75715e">// Block URLs
</span></span></span></code></pre></div><p>This is used to block URLs</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">rewritten</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">data</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`&lt;script src=&#34;https://entrpix.me/native.js&#34;&gt;&lt;/script&gt;`</span> <span style="color:#f92672">+</span> <span style="color:#e6db74">`&lt;script&gt;</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">jsInjection</span><span style="color:#e6db74">}</span><span style="color:#e6db74">&lt;/script&gt;`</span>; <span style="color:#75715e">// Element Rewriting + JS Injection
</span></span></span></code></pre></div><p>This is used to inject the client/rewriter inside the page as well as injecting custom JS inside the page.<br>
This gives us the benefit of being able to use APIs like <code>document</code> to control the page, compared to using an HTML parser like <a href="https://www.npmjs.com/package/parse5">parse5</a></p>
<h3 id="client">Client</h3>
<p>The client is also simple.</p>
<p>It checks all elements for <code>href</code> and <code>src</code> attributes and rewrites them to be <code>sandboxed</code>.</p>
<p>For example</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;styles.css&#34;</span>&gt;
</span></span></code></pre></div><p>Will be rewritten as</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-html" data-lang="html"><span style="display:flex;"><span>&lt;<span style="color:#f92672">link</span> <span style="color:#a6e22e">rel</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;stylesheet&#34;</span> <span style="color:#a6e22e">href</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#34;localhost:3000/url/*URL*/style.css&#34;</span>&gt;
</span></span></code></pre></div><p>The clients code is:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;"><code class="language-js" data-lang="js"><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">rewrite</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">proxyUrl</span>) {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">attributes</span> <span style="color:#f92672">=</span> [<span style="color:#e6db74">&#39;href&#39;</span>, <span style="color:#e6db74">&#39;src&#39;</span>]; <span style="color:#75715e">// Rewrite these attr&#39;s
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>
</span></span><span style="display:flex;"><span>    <span style="color:#a6e22e">attributes</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">attr</span> =&gt; {
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">attrValue</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">element</span>.<span style="color:#a6e22e">getAttribute</span>(<span style="color:#a6e22e">attr</span>);
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>        <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">attrValue</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">!</span><span style="color:#a6e22e">attrValue</span>.<span style="color:#a6e22e">includes</span>(<span style="color:#e6db74">&#39;native.js&#39;</span>)) { <span style="color:#75715e">// Don&#39;t rewrite the rewritier
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>            <span style="color:#66d9ef">const</span> <span style="color:#a6e22e">url</span> <span style="color:#f92672">=</span> <span style="color:#66d9ef">new</span> <span style="color:#a6e22e">URL</span>(<span style="color:#a6e22e">attrValue</span>, <span style="color:#a6e22e">proxyUrl</span>);
</span></span><span style="display:flex;"><span>            <span style="color:#a6e22e">element</span>.<span style="color:#a6e22e">setAttribute</span>(<span style="color:#a6e22e">attr</span>, <span style="color:#e6db74">`</span><span style="color:#e6db74">${</span>window.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">origin</span><span style="color:#e6db74">}</span><span style="color:#e6db74">/url/</span><span style="color:#e6db74">${</span><span style="color:#a6e22e">url</span><span style="color:#e6db74">}</span><span style="color:#e6db74">`</span>);
</span></span><span style="display:flex;"><span>        }
</span></span><span style="display:flex;"><span>    });
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">if</span> (<span style="color:#a6e22e">element</span>.<span style="color:#a6e22e">hasAttribute</span>(<span style="color:#e6db74">&#39;integrity&#39;</span>)) {
</span></span><span style="display:flex;"><span>        <span style="color:#a6e22e">element</span>.<span style="color:#a6e22e">removeAttribute</span>(<span style="color:#e6db74">&#39;integrity&#39;</span>); <span style="color:#75715e">// kys
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>    }
</span></span><span style="display:flex;"><span>}
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">function</span> <span style="color:#a6e22e">getUrl</span>() {
</span></span><span style="display:flex;"><span>    <span style="color:#66d9ef">return</span> window.<span style="color:#a6e22e">location</span>.<span style="color:#a6e22e">pathname</span>.<span style="color:#a6e22e">split</span>(<span style="color:#e6db74">&#39;/url/&#39;</span>).<span style="color:#a6e22e">pop</span>(); <span style="color:#75715e">// Grab URL
</span></span></span><span style="display:flex;"><span><span style="color:#75715e"></span>};
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">proxyUrl</span> <span style="color:#f92672">=</span> <span style="color:#a6e22e">getUrl</span>();
</span></span><span style="display:flex;"><span>
</span></span><span style="display:flex;"><span><span style="color:#66d9ef">const</span> <span style="color:#a6e22e">elements</span> <span style="color:#f92672">=</span> document.<span style="color:#a6e22e">querySelectorAll</span>(<span style="color:#e6db74">&#39;[href], [src]&#39;</span>);
</span></span><span style="display:flex;"><span><span style="color:#a6e22e">elements</span>.<span style="color:#a6e22e">forEach</span>(<span style="color:#a6e22e">element</span> =&gt; <span style="color:#a6e22e">rewrite</span>(<span style="color:#a6e22e">element</span>, <span style="color:#a6e22e">proxyUrl</span>));
</span></span></code></pre></div><p>It will rewrite the attributes <code>src</code> and <code>href</code></p>
<p>It also has extra code to fix some issues like the <code>integrity</code> API, making sure all pages get re-written correctly, etc.</p>
<h2 id="tada">Tada</h2>
<p>Thats a simple Webproxy that does HTML and CSS rewriting :D<br>
I hope you learned something!</p>
]]></description>
      
    </item>
    
    
  </channel>
</rss>
