
{
    
    
    
    
        
        
        
    
        
        
        
    
        
        
        
    
    "pages": [{"date":"2024-05-10","image":"","imageAlt":"","link":"https://entrpix.me/posts/example/","summary":"Example Example Blog Post\nH1 H2 H3 H4 Italic Bold\nLink\nconsole.log(\u0026#39;Syntax Highlighting\u0026#39;); ","tags":["example"],"text":"example example blog post\nh1 h2 h3 h4 italic bold\nlink\nconsole.log(\u0026#39;syntax highlighting\u0026#39;); ","title":"Hello, World!"},{"date":"2024-05-10","image":"","imageAlt":"","link":"https://entrpix.me/posts/how_i_made_a_webproxy/","summary":"How I made a basic Webproxy I wanted to document how I made a very simple Webproxy for anyone whos interested in this kind of stuff\nFirst of all this not something like Ultraviolet.\nUltraviolet uses TompHTTP, uses Service Workers, and does JavaScript rewriting.\nFrankly, all of that stuff is too complicated for me.\nSo instead I wanted to create a basic Webproxy that only does HTML and CSS rewriting.","tags":["web-development","webproxy"],"text":"how i made a basic webproxy i wanted to document how i made a very simple webproxy for anyone whos interested in this kind of stuff\nfirst of all this not something like ultraviolet.\nultraviolet uses tomphttp, uses service workers, and does javascript rewriting.\nfrankly, all of that stuff is too complicated for me.\nso instead i wanted to create a basic webproxy that only does html and css rewriting.\nthis means only static sites will work.\nhow i made it there are two parts, the server and the client.\nserver the server is simple.\nit uses expressjs and node-fetch.\nexpressjs is used for:\nserving the client creating the api for node-fetch and controlling headers. node-fetch is used for proxying the request to the website\nthis is the server code:\nimport fetch from \u0026#39;node-fetch\u0026#39;; import express from \u0026#39;express\u0026#39;; const publicpath = \u0026#34;public\u0026#34;; const port = 3000; const blocklist = [\u0026#34;https://www.google.com\u0026#34;]; // sites in here will return 500 const jsinjection = `console.log(\u0026#39;native\u0026#39;);`; // injects this into page const app = express(); app.use(express.static(publicpath)); const handleresponse = async (response, res) =\u0026gt; { const contenttype = response.headers.get(\u0026#39;content-type\u0026#39;); res.setheader(\u0026#39;content-type\u0026#39;, contenttype); if (contenttype \u0026amp;\u0026amp; contenttype.startswith(\u0026#39;text\u0026#39;)) { const data = await response.text(); const rewritten = data + `\u0026lt;script src=\u0026#34;/native.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;` + `\u0026lt;script\u0026gt;${jsinjection}\u0026lt;/script\u0026gt;`; // element rewriting + js injection res.send(rewritten); } else { const data = await response.arraybuffer(); const buffer = buffer.from(data); res.send(buffer); } } app.get(\u0026#39;/url/*\u0026#39;, async (req, res) =\u0026gt; { const url = req.params[0]; if (blocklist.includes(url)) { res.status(500).send(\u0026#39;blocked url\u0026#39;); return; } // block urls try { const response = await fetch(url); await handleresponse(response, res); } catch (error) { console.error(error); res.status(500).send(\u0026#39;error fetching url\u0026#39;); } }); app.listen(port, () =\u0026gt; { console.log(`server is running on port: ${port}`); }); contenttype is used for controlling how the content is being served.\nthings like html, css, etc. use content-type text/*something* and are returned as text.\nmeanwhile images use content-type image/*something* and return buffers.\nif (blocklist.includes(url)) { res.status(500).send(\u0026#39;blocked url\u0026#39;); return; } // block urls this is used to block urls\nconst rewritten = data + `\u0026lt;script src=\u0026#34;/native.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;` + `\u0026lt;script\u0026gt;${jsinjection}\u0026lt;/script\u0026gt;`; // element rewriting + js injection this is used to inject the client/rewriter inside the page as well as injecting custom js inside the page.\nthis gives us the benefit of being able to use apis like document to control the page, compared to using an html parser like parse5\nclient the client is also simple.\nit checks all elements for href and src attributes and rewrites them to be sandboxed.\nfor example\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;styles.css\u0026#34;\u0026gt; will be rewritten as\n\u0026lt;link rel=\u0026#34;stylesheet\u0026#34; href=\u0026#34;localhost:3000/url/*url*/style.css\u0026#34;\u0026gt; the clients code is:\nfunction rewrite(element, proxyurl) { const attributes = [\u0026#39;href\u0026#39;, \u0026#39;src\u0026#39;]; // rewrite these attr\u0026#39;s attributes.foreach(attr =\u0026gt; { const attrvalue = element.getattribute(attr); if (attrvalue \u0026amp;\u0026amp; !attrvalue.includes(\u0026#39;native.js\u0026#39;)) { // don\u0026#39;t rewrite the rewritier const url = new url(attrvalue, proxyurl); element.setattribute(attr, `${window.location.origin}/url/${url}`); } }); if (element.hasattribute(\u0026#39;integrity\u0026#39;)) { element.removeattribute(\u0026#39;integrity\u0026#39;); // kys } } function geturl() { return window.location.pathname.split(\u0026#39;/url/\u0026#39;).pop(); // grab url }; const proxyurl = geturl(); const elements = document.queryselectorall(\u0026#39;[href], [src]\u0026#39;); elements.foreach(element =\u0026gt; rewrite(element, proxyurl)); it will rewrite the attributes src and href\nit also has extra code to fix some issues like the integrity api, making sure all pages get re-written correctly, etc.\ntada thats a simple webproxy that does html and css rewriting :d\ni hope you learned something!\n","title":"How I made a basic Webproxy"},{"date":"2024-05-10","image":"","imageAlt":"","link":"https://entrpix.me/about/","summary":"Hai, I\u0026rsquo;m Lily! I am a Transfem 14-yo Fullstack Web-Developer\nI mainly work with Typescript and NodeJS.\nI am a developer for Mercury Workshop.\nProgramming languages I\u0026rsquo;m familiar with:\nJavaScript/TypeScript Python 3 Bash C (Want to learn) C++ (Want to learn) Java (Want to learn) Some non-programming things I\u0026rsquo;m interested in are:\nGeometry Dash Madoka Magica Vocaloid Vtubers ily Claire \u0026lt;3","tags":[],"text":"hai, i\u0026rsquo;m lily! i am a transfem 14-yo fullstack web-developer\ni mainly work with typescript and nodejs.\ni am a developer for mercury workshop.\nprogramming languages i\u0026rsquo;m familiar with:\njavascript/typescript python 3 bash c (want to learn) c++ (want to learn) java (want to learn) some non-programming things i\u0026rsquo;m interested in are:\ngeometry dash madoka magica vocaloid vtubers ily claire \u0026lt;3\n","title":"Hai :3"}]
}

